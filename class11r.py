# -*- coding: utf-8 -*-
"""Class11R.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xUY5EV-ldlxVhZg52cbaeaHe_4k7WOpZ

# Красный трек
## Семинар по теме «Работа с Git»

## Блокирующий семинар

**Как влияет на уровень**

Чтобы подтвердить основной уровень, необходимо решить задачи и сдать на проверку ноутбук.

**Как влияет на оценку**

За выполнение заданий **всех** семинаров (блокирующих и неблокирующих) начисляются баллы. Чем больше баллов, тем выше оценка за курс.

## Оценивание работы на семинаре

**Система оценивания —** бинарная:

  - если все задачи решены корректно, без ошибок и полностью соответствуют стандартам кода на курсе, то задание выполнено и оценка — **10 баллов**;
  - если решения содержат ошибки или не соответствуют требованиям, то задание не выполнено и оценка — **0 баллов**.


**Проверка задания**

- Перед тем, как сдать задание, убедись, что твой код работает без ошибок и соответствует стандартам. Для этого используй автоматическую проверку.
- Загрузи задание на LMS. Ассистент проверит, соответствуют ли твои решения требованиям и целям домашнего задания, и выставит оценку.


**Доработка**

- Если твое задание получило 0 баллов, его вернут на доработку через LMS с комментариями о том, что нужно исправить.

Твоя задача — разработать консольное приложение «Персональный помощник». Приложение объединит несколько функций: управление заметками, задачами, контактами, финансовыми записями, калькулятор. Во время работы над проектом тебе нужно:
- реализовать основные операции CRUD (Create, Read, Update, Delete) для различных моделей данных;
- структурировать проект с использованием ООП;
- применять базовые навыки работы с Git;
- добавить функциональность импорта и экспорта данных в форматах CSV и JSON.

## **Требования**

>**Важно**. Дочитай задание до конца, а потом приступай к выполнению.

### **1. Настройка окружения**
* **Создай структуру проекта:**
  * Создай папку проекта, например `personal_assistant`.
  * Внутри папки создай файл `personal_assistant.py` — основной файл приложения.
* **Установи необходимые библиотеки:**
  * Используй `pip` для установки библиотеки `csv` (стандартная библиотека) и других, если потребуется. Также для работы с csv можно использовать `pandas`.

### **2. Создание приложения**

* **Разработай меню взаимодействия с пользователем:**
  * При запуске приложения должно отображаться главное меню, в котором отображаются варианты действий для пользователя:

        Добро пожаловать в Персональный помощник!
        Выберите действие:
        1. Управление заметками
        2. Управление задачами
        3. Управление контактами
        4. Управление финансовыми записями
        5. Калькулятор
        6. Выход

  * После обработки ввода пользователя он перенаправляется к соответствующему разделу.

### **3. Реализация функциональности**

#### **3.1. Управление заметками**

- **Модель заметки (Note)**

  Атрибуты:
   
    * `id` (`int`): уникальный идентификатор заметки.
    * `title` (`str`): заголовок заметки (обязательное поле).
    * `content` (`str`): содержимое заметки.
    * `timestamp` (`str`): дата и время создания/изменения заметки в формате `ДД-ММ-ГГГГ ЧЧ:ММ:СС`.

* **Функционал**

  * Создание новой заметки.
  * Просмотр списка заметок.
  * Просмотр подробностей заметки.
  * Редактирование заметки.
  * Удаление заметки.
  * Импорт и экспорт заметок в формате CSV.

* **Хранение данных**

  Заметки должны сохраняться в JSON-файле `notes.json`.

* **Формат**

  Даты должны отображаться и вводиться в формате `ДД-ММ-ГГГГ ЧЧ:ММ:СС`.

#### **3.2. Управление задачами**

- **Модель задачи (Task)**

  Атрибуты:

  * `id` (`int`): уникальный идентификатор задачи.
  * `title` (`str`): краткое описание задачи (обязательное поле).
  * `description` (`str`): подробное описание задачи.
  * `done` (`bool`): статус задачи (выполнена или нет, по умолчанию `False`).
  * `priority` (`str`): приоритет задачи («Высокий», «Средний», «Низкий»).
  * `due_date` (`str`): срок выполнения задачи в формате `ДД-ММ-ГГГГ`.

* **Функционал**
  
  * Добавление новой задачи.
  * Просмотр списка задач с отображением статуса, приоритета и срока.
  * Отметка задачи как выполненной.
  * Редактирование задачи.
  * Удаление задачи.
  * Импорт и экспорт задач в формате CSV.

* **Дополнительные возможности**

  * Установка приоритетов и сроков выполнения задач.
  * Фильтрация задач по статусу, приоритету или сроку выполнения.

* **Хранение данных**

  Задачи должны сохраняться в JSON-файле `tasks.json`.

* **Формат**

Даты должны отображаться и вводиться в формате `ДД-ММ-ГГГГ`.

#### **3.3. Управление контактами**

- **Модель контакта (Contact)**

  Атрибуты:
  * `id` (`int`): уникальный идентификатор контакта.
  * `name` (`str`): имя контакта (обязательное поле).
  * `phone` (`str`): номер телефона.
  * `email` (`str`): адрес электронной почты.

* **Функционал**

  * Добавление нового контакта.
  * Поиск контакта по имени или номеру телефона.
  * Редактирование контакта.
  * Удаление контакта.
  * Импорт и экспорт контактов в формате CSV.

* **Хранение данных**

  Сохраняй контакты в JSON-файле `contacts.json`.

#### **3.4. Управление финансовыми записями**

- **Модель финансовой записи (FinanceRecord)**

 **Атрибуты**

  * `id` (`int`): уникальный идентификатор записи.
  * `amount` (`float`): сумма операции (положительное число для доходов, отрицательное для расходов).
  * `category` (`str`): категория операции (например, «Еда», «Транспорт», «Зарплата»).
  * `date` (`str`): дата операции в формате `ДД-ММ-ГГГГ`.
  * `description` (`str`): описание операции.

* **Функционал**

  * Добавление новой финансовой записи (доход или расход).
  * Просмотр всех записей с возможностью фильтрации по дате или категории.
  * Генерация отчётов о финансовой активности за определённый период.
  * Импорт и экспорт финансовых записей в формате CSV.

* **Дополнительные возможности**

  * Подсчёт общего баланса.
  * Группировка расходов и доходов по категориям.

* **Хранение данных**

  Финансовые записи должны сохраняться в JSON-файле `finance.json`.

* **Формат**

  Даты должны отображаться и вводиться в формате `ДД-ММ-ГГГГ`.

#### **3.5. Калькулятор**

* **Функционал**

  Калькулятор должен выполнять базовые арифметические операции: сложение, вычитание, умножение, деление.

* **Обработка ошибок**

  * Предусмотри обработку ошибок (например, деление на ноль).
  * Обеспечь безопасность при вводе выражений пользователем.

### **4. Импорт и экспорт данных**

* **Функционал**

  * Импорт данных из CSV-файлов для заметок, задач, контактов и финансовых записей.
  * Экспорт данных в CSV-файлы.

* **Реализация**

  Используй библиотеку `csv` или `pandas` для работы с CSV-файлами.

### **5. Обработка ошибок и исключений**

* **Обработка пользовательского ввода**

  * Проверяй корректность вводимых данных.
  * Используй блоки `try`, `except` для обработки возможных исключений.

* **Логирование ошибок**

  Опционально: реализуй логирование ошибок в файл для последующего анализа.

### **6. Структурирование проекта**

* **Организация кода**
  * Раздели код на классы и функции.
  * Избегай дублирования кода.

* **Контекстные менеджеры**
  
  Используй конструкцию `with` при работе с файлами для автоматического закрытия файлов.

### **7. Работа с Git**

* **Инициализация репозитория**

  Создай локальный репозиторий с помощью `git init`.

* **Основные операции**

  * Отслеживай изменения файлов с помощью `git add`.
  * Фиксируй изменения с понятными сообщениями коммитов `git commit -m 'Сообщение'`.

* **Работа с удалённым репозиторием**

  * Подключи удалённый репозиторий (например, на GitHub) с помощью `git remote add origin <URL>`.
  * Отправь изменения в удалённый репозиторий `git push origin master`.
  * Получай обновления из удалённого репозитория `git pull origin master`.

### 8. **Тестирование приложения**

* **Тестирование каждой функциональности**
  * Проверь все реализованные функции приложения.
  * Убедитесь, что данные корректно сохраняются и загружаются.

* **Тестирование импорта и экспорта данных**
  
  Проверь корректность импорта и экспорта в CSV-формат.
"""



"""## **Примеры тестирования функционала**

### **Главное меню**

      Добро пожаловать в Персональный помощник!
      Выберите действие:
      1. Управление заметками
      2. Управление задачами
      3. Управление контактами
      4. Управление финансовыми записями
      5. Калькулятор
      6. Выход

### **Пример сценария. Добавление новой задачи**

1. **Запрос:**

    `Выберите действие: 2`

2. **Приложение:**

        Управление задачами:
        1. Добавить новую задачу
        2. Просмотреть задачи
        3. Отметить задачу как выполненную
        4. Редактировать задачу
        5. Удалить задачу
        6. Экспорт задач в CSV
        7. Импорт задач из CSV
        8. Назад
        Выберите действие: 1

3. **Пользователь вводит данные:**

        Введите название задачи: Подготовить отчёт
        Введите описание задачи: Составить ежемесячный отчёт по продажам
        Выберите приоритет (Высокий/Средний/Низкий): Высокий
        Введите срок выполнения (в формате ДД-ММ-ГГГГ): 31-12-2023

4. **Приложение:**

  `Задача успешно добавлена!`

### **Пример сценария. Генерация финансового отчёта**

1. **Запрос:**

  `Выберите действие: 4`

2. **Приложение:**

        Управление финансовыми записями:
        1. Добавить новую запись
        2. Просмотреть все записи
        3. Генерация отчёта
        4. Удалить запись
        5. Экспорт финансовых записей в CSV
        6. Импорт финансовых записей из CSV
        7. Назад
        Выберите действие: 3

3. **Пользователь вводит данные:**

        Введите начальную дату (ДД-ММ-ГГГГ): 01-11-2023
        Введите конечную дату (ДД-ММ-ГГГГ): 30-11-2023

4. **Приложение генерирует отчёт:**

        Финансовый отчёт за период с 01-11-2023 по 30-11-2023:
        - Общий доход: 50 000 руб.
        - Общие расходы: 30 000 руб.
        - Баланс: 20 000 руб.
        Подробная информация сохранена в файле report_01-11-2023_30-11-2023.csv

###  Пример сценария. Импорт контактов из CSV

1. **Запрос:**

`Выберите действие: 3`

2. **Приложение:**

        Управление контактами:
        1. Добавить новый контакт
        2. Поиск контакта
        3. Редактировать контакт
        4. Удалить контакт
        5. Экспорт контактов в CSV
        6. Импорт контактов из CSV
        7. Назад
        Выберите действие: 6

3. **Пользователь вводит данные:**

        Введите имя CSV-файла для импорта: contacts.csv

4. **Приложение:**

        Контакты успешно импортированы из CSV-файла.

## Тестирование функционала


|Действие|Ожидаемый результат|
|---|---|
|Добавление новой заметки|Заметка сохраняется в `notes.json`, отображается в списке заметок|
|Редактирование заметки|Изменения сохраняются в `notes.json`, отображаются при просмотре заметки|
|Удаление заметки|	Заметка удаляется из `notes.json`, не отображается в списке заметок|
|Экспорт заметок в CSV|	Файл `notes_export.csv` создаётся с корректными данными|
|Импорт заметок из CSV|	Заметки из указанного файла добавляются в `notes.json`|
|Добавление новой задачи|	Задача сохраняется в `tasks.json`, отображается в списке задач|
|Отметка задачи как выполненной|	Статус задачи обновляется в `tasks.json`, отображается как выполненная|
|Генерация финансового отчёта|	Отчёт отображается на экране, подробная информация сохраняется в CSV-файле|
|Экспорт финансовых записей в CSV|	Файл `finance_export.csv` создаётся с корректными данными|
|Импорт финансовых записей из CSV	|Записи из указанного файла добавляются в `finance.json`|
|Использование калькулятора	|Выражение вычисляется, результат отображается корректно|
|Ввод некорректных данных (например, неверная дата)	|Приложение выводит сообщение об ошибке, предлагает повторить ввод|
|Работа с Git|	Репозиторий инициализирован, изменения коммитятся и пушатся в удалённый репозиторий без ошибок|

## Рекомендации по реализации

* **Используй ООП**
  * Создай отдельные классы для каждой модели данных.
  * Инкапсулируй логику работы с данными внутри методов классов.

* **Работа с файлами**
  * Реализуй методы для загрузки и сохранения данных в JSON-файлы.
  * Используй библиотеку `csv` для импорта и экспорта данных.
  * Обрабатывай возможные ошибки при работе с файлами.

* **Функции и модули**

  Раздели функциональность на отдельные функции и методы для улучшения читаемости кода.

* **Проверка вводимых данных**

  * Проверяй корректность и формат вводимых пользователем данных.
  * Используй регулярные выражения или методы строки для проверки формата ввода (например, для дат или e-mail).

* **Обработка исключений**

  * Используй блоки `try`, `except`  для обработки потенциальных ошибок.

  * Выводи пользователю понятные сообщения об ошибках.

* **Контекстные менеджеры**

  Используй конструкцию `with` при работе с файлами для автоматического закрытия файлов.
"""



import json
import csv
from datetime import datetime


# Модели данных
class Note:
    def __init__(self, id, title, content, timestamp):
        self.id = id
        self.title = title
        self.content = content
        self.timestamp = timestamp


class Task:
    def __init__(self, id, title, description, priority, due_date, done):
        self.id = id
        self.title = title
        self.description = description
        self.priority = priority
        self.due_date = due_date
        self.done = done


class FinanceRecord:
    def __init__(self, id, amount, category, date, description):
        self.id = id
        self.amount = amount
        self.category = category
        self.date = date
        self.description = description


class Contact:
    def __init__(self, id, name, phone, email):
        self.id = id
        self.name = name
        self.phone = phone
        self.email = email


# Главный класс приложения
class PersonalAssistant:
    def __init__(self):
        self.notes = []
        self.tasks = []
        self.finance_records = []
        self.contacts = []
        self.load_data()

    def save_data(self):
        with open("notes.json", "w") as file:
            json.dump([note.__dict__ for note in self.notes], file)
        with open("tasks.json", "w") as file:
            json.dump([task.__dict__ for task in self.tasks], file)
        with open("finance.json", "w") as file:
            json.dump([record.__dict__ for record in self.finance_records], file)
        with open("contacts.json", "w") as file:
            json.dump([contact.__dict__ for contact in self.contacts], file)

    def load_data(self):
        try:
            with open("notes.json", "r") as file:
                self.notes = [Note(**data) for data in json.load(file)]
        except FileNotFoundError:
            self.notes = []

        try:
            with open("tasks.json", "r") as file:
                self.tasks = [Task(**data) for data in json.load(file)]
        except FileNotFoundError:
            self.tasks = []

        try:
            with open("finance.json", "r") as file:
                self.finance_records = [FinanceRecord(**data) for data in json.load(file)]
        except FileNotFoundError:
            self.finance_records = []

        try:
            with open("contacts.json", "r") as file:
                self.contacts = [Contact(**data) for data in json.load(file)]
        except FileNotFoundError:
            self.contacts = []

    def run(self):
        while True:
            print("\nДобро пожаловать в Персональный помощник!")
            print("1. Управление заметками")
            print("2. Управление задачами")
            print("3. Управление финансовыми записями")
            print("4. Управление контактами")
            print("5. Калькулятор")
            print("6. Выход")
            choice = input("Выберите действие: ")
            if choice == "1":
                self.manage_notes()
            elif choice == "2":
                self.manage_tasks()
            elif choice == "3":
                self.manage_finance()
            elif choice == "4":
                self.manage_contacts()
            elif choice == "5":
                self.calculator()
            elif choice == "6":
                self.save_data()
                print("До свидания!")
                break
            else:
                print("Некорректный выбор, попробуйте снова.")

    # Управление заметками
    def manage_notes(self):
        while True:
            print("\nУправление заметками:")
            print("1. Добавить заметку")
            print("2. Просмотреть заметки")
            print("3. Редактировать заметку")
            print("4. Удалить заметку")
            print("5. Экспорт в CSV")
            print("6. Импорт из CSV")
            print("7. Назад")
            choice = input("Выберите действие: ")
            if choice == "1":
                self.add_note()
            elif choice == "2":
                self.view_notes()
            elif choice == "3":
                self.edit_note()
            elif choice == "4":
                self.delete_note()
            elif choice == "5":
                self.export_notes_to_csv()
            elif choice == "6":
                self.import_notes_from_csv()
            elif choice == "7":
                break
            else:
                print("Некорректный выбор, попробуйте снова.")

    def add_note(self):
        note_id = len(self.notes) + 1
        title = input("Введите заголовок заметки: ")
        content = input("Введите содержание заметки: ")
        timestamp = datetime.now().strftime("%d-%m-%Y %H:%M:%S")
        note = Note(note_id, title, content, timestamp)
        self.notes.append(note)
        print("Заметка успешно добавлена!")

    def view_notes(self):
        if not self.notes:
            print("Нет заметок.")
            return
        for note in self.notes:
            print(f"ID: {note.id} | Заголовок: {note.title} | Содержание: {note.content} |Дата: {note.timestamp} ")

    def edit_note(self):
        note_id = int(input("Введите ID заметки для редактирования: "))
        note = next((n for n in self.notes if n.id == note_id), None)
        if note:
            note.title = input("Введите новый заголовок заметки: ") or note.title
            note.content = input("Введите новое содержание заметки: ") or note.content
            note.timestamp = datetime.now().strftime("%d-%m-%Y %H:%M:%S")
            print("Заметка успешно обновлена!")
        else:
            print("Заметка не найдена.")

    def delete_note(self):
        note_id = int(input("Введите ID заметки для удаления: "))
        self.notes = [n for n in self.notes if n.id != note_id]
        print("Заметка успешно удалена!")

    def export_notes_to_csv(self):
        with open("notes.csv", "w", newline='', encoding="utf-8") as file:
            writer = csv.writer(file)
            writer.writerow(["ID", "Title", "Content", "Timestamp"])
            for note in self.notes:
                writer.writerow([note.id, note.title, note.content, note.timestamp])
        print("Заметки успешно экспортированы в notes.csv!")

    def import_notes_from_csv(self):
        try:
            with open("notes.csv", "r", encoding="utf-8") as file:
                reader = csv.DictReader(file)
                for row in reader:
                    note = Note(int(row["ID"]), row["Title"], row["Content"], row["Timestamp"])
                    self.notes.append(note)
            print("Заметки успешно импортированы из notes.csv!")
        except FileNotFoundError:
            print("Файл notes.csv не найден.")

    # Управление задачами
    def manage_tasks(self):
        while True:
            print("\nУправление задачами:")
            print("1. Добавить задачу")
            print("2. Просмотреть задачи")
            print("3. Отметить задачу как выполненную")
            print("4. Редактировать задачу")
            print("5. Удалить задачу")
            print("6. Экспорт задач в CSV")
            print("7. Импорт задач из CSV")
            print("8. Назад")
            choice = input("Выберите действие: ")
            if choice == "1":
                self.add_task()
            elif choice == "2":
                self.view_tasks()
            elif choice == "3":
                self.mark_task_done()
            elif choice == "4":
                self.edit_task()
            elif choice == "5":
                self.delete_task()
            elif choice == "6":
                self.export_tasks_to_csv()
            elif choice == "7":
                self.import_tasks_from_csv()
            elif choice == "8":
                break
            else:
                print("Некорректный выбор, попробуйте снова.")

    def add_task(self):
        task_id = len(self.tasks) + 1
        title = input("Введите название задачи: ")
        description = input("Введите описание задачи: ")
        priority = input("Введите приоритет задачи (Высокий/Средний/Низкий): ")
        due_date = input("Введите срок выполнения задачи (ДД-ММ-ГГГГ): ")
        task = Task(task_id, title, description, priority, due_date, False)
        self.tasks.append(task)
        print("Задача успешно добавлена!")

    def view_tasks(self):
        if not self.tasks:
            print("Нет задач.")
            return
        for task in self.tasks:
            status = "Выполнена" if task.done else "Не выполнена"
            print(f"ID: {task.id} | Название: {task.title} | Описание: {task.description} | Приоритет: {task.priority} | Срок: {task.due_date} | Статус: {task.done}")

    def mark_task_done(self):
        task_id = int(input("Введите ID задачи для отметки как выполненной: "))
        task = next((t for t in self.tasks if t.id == task_id), None)
        if task:
            task.done = True
            print("Задача успешно отмечена как выполненная!")
        else:
            print("Задача не найдена.")

    def delete_task(self):
        task_id = int(input("Введите ID задачи для удаления: "))
        self.tasks = [t for t in self.tasks if t.id != task_id]
        print("Задача успешно удалена!")


    def export_tasks_to_csv(self):
        with open("tasks.csv", "w", newline='', encoding="utf-8") as file:
            writer = csv.writer(file)
            writer.writerow(["ID", "Title", "Description", "Priority", "Date", "Status"])
            for task in self.tasks:
                writer.writerow([task.id, task.title, task.description, task.priority, task.due_date, task.done])
        print("Заметки успешно экспортированы в tasks.csv!")

    def import_tasks_from_csv(self):
        try:
            with open("tasks.csv", "r", encoding="utf-8") as file:
                reader = csv.DictReader(file)
                for row in reader:
                    task = Task(int(row["ID"]), row["Title"], row["Description"], row["Priority"], row["Date"], row["Status"])
                    self.tasks.append(task)
            print("Задачи успешно импортированы из tasks.csv!")
        except FileNotFoundError:
            print("Файл tasks.csv не найден.")

    # Управление финансовыми записями
    def manage_finance(self):
        while True:
            print("\nУправление финансовыми записями:")
            print("1. Добавить запись")
            print("2. Просмотреть записи")
            print("3. Генерация отчёта")
            print("4. Удалить запись")
            print("5. Экспорт в CSV")
            print("6. Импорт из CSV")
            print("7. Назад")
            choice = input("Выберите действие: ")
            if choice == "1":
                self.add_finance_record()
            elif choice == "2":
                self.view_finance_records()
            elif choice == "3":
                self.generate_financial_report()
            elif choice == "4":
                self.delete_finance_record()
            elif choice == "5":
                self.export_finance_to_csv()
                # ÷self.export_notes_to_csv()
            elif choice == "6":
                self.import_finance_from_csv()
                # self.import_notes_from_csv()
            elif choice == "7":
                break
            else:
                print("Некорректный выбор, попробуйте снова.")

    def add_finance_record(self):
        record_id = len(self.finance_records) + 1
        amount = float(input("Введите сумму (положительная для дохода, отрицательная для расхода): "))
        category = input("Введите категорию: ")
        date = input("Введите дату записи (ДД-ММ-ГГГГ): ")
        description = input("Введите описание: ")
        record = FinanceRecord(record_id, amount, category, date, description)
        self.finance_records.append(record)
        print("Финансовая запись успешно добавлена!")

    def view_finance_records(self):
        if not self.finance_records:
            print("Нет финансовых записей.")
            return
        for record in self.finance_records:
            print(f"ID: {record.id} | Сумма: {record.amount} | Категория: {record.category} | Дата: {record.date} | Описание: {record.description}")

    def generate_financial_report(self):
        start_date = input("Введите начальную дату (ДД-ММ-ГГГГ): ")
        end_date = input("Введите конечную дату (ДД-ММ-ГГГГ): ")
        total_income = sum(r.amount for r in self.finance_records if r.amount > 0 and start_date <= r.date <= end_date)
        total_expenses = sum(r.amount for r in self.finance_records if r.amount < 0 and start_date <= r.date <= end_date)
        print(f"\nФинансовый отчёт за период с {start_date} по {end_date}:")
        print(f" - Общий доход: {total_income} руб.")
        print(f" - Общие расходы: {total_expenses} руб.")
        print(f" - Баланс: {total_income + total_expenses} руб.")
        with open(f"report_{start_date}_{end_date}.csv", "w", newline='', encoding="utf-8") as file:
            writer = csv.writer(file)
            writer.writerow(["ID", "Amount", "Category", "Date", "Description"])
            for record in self.finance_records:
                if start_date <= record.date <= end_date:
                    writer.writerow([record.id, record.amount, record.category, record.date, record.description])
        print(f"Отчёт сохранён в файле report_{start_date}_{end_date}.csv")


    def delete_finance_record(self):
        record_id = int(input("Введите ID финансового отчета для удаления: "))
        self.finance_records = [f for f in self.finance_records if f.id != record_id]
        print("Финансовый отчет успешно удален!")


    def export_finance_to_csv(self):
        with open("finance.csv", "w", newline='', encoding="utf-8") as file:
            writer = csv.writer(file)
            writer.writerow(["ID", "Amount", "Category", "Date", "Description"])
            for finance in self.finance_records:
                writer.writerow([finance.id, finance.amount, finance.category, finance.date, finance.description])
        print("Финансовый отчет успешно экспортирован в finances.csv!")

    def import_finance_from_csv(self):
        try:
            with open("finance.csv", "r", encoding="utf-8") as file:
                reader = csv.DictReader(file)
                for row in reader:
                    finance = FinanceRecord(int(row["ID"]), row["Amount"], row["Category"], row["Date"], row["Description"])
                    self.finance_records.append(finance)
            print("Финансовый отчет успешно импортированы из finances.csv!")
        except FileNotFoundError:
            print("Файл finances.csv не найден.")



    # Управление контактами
    def manage_contacts(self):
        while True:
            print("\nУправление контактами:")
            print("1. Добавить контакт")
            print("2. Просмотреть контакты")
            print("3. Удалить контакт")
            print("4. Экспорт в CSV")
            print("5. Импорт из CSV")
            print("6. Назад")
            choice = input("Выберите действие: ")
            if choice == "1":
                self.add_contact()
            elif choice == "2":
                self.view_contacts()
            elif choice == "3":
                self.delete_contact()
            elif choice == "4":
                self.export_contacts_to_csv()
            elif choice == "5":
                self.import_contacts_from_csv()
            elif choice == "6":
                break
            else:
                print("Некорректный выбор, попробуйте снова.")

    def add_contact(self):
        contact_id = len(self.contacts) + 1
        name = input("Введите имя контакта: ")
        phone = input("Введите номер телефона: ")
        email = input("Введите email: ")
        contact = Contact(contact_id, name, phone, email)
        self.contacts.append(contact)
        print("Контакт успешно добавлен!")

    def view_contacts(self):
        if not self.contacts:
            print("Нет контактов.")
            return
        for contact in self.contacts:
            print(f"ID: {contact.id} | Имя: {contact.name} | Телефон: {contact.phone} | Email: {contact.email}")

    def delete_contact(self):
        contact_id = int(input("Введите ID контакта для удаления: "))
        self.contacts = [c for c in self.contacts if c.id != contact_id]
        print("Контакт успешно удалён!")

    def export_contacts_to_csv(self):
        with open("contacts.csv", "w", newline='', encoding="utf-8") as file:
            writer = csv.writer(file)
            writer.writerow(["ID", "Name", "Phone", "Email"])
            for contact in self.contacts:
                writer.writerow([contact.id, contact.name, contact.phone, contact.email])
        print("Контакты успешно экспортированы в contacts.csv!")

    def import_contacts_from_csv(self):
        try:
            with open("contacts.csv", "r", encoding="utf-8") as file:
                reader = csv.DictReader(file)
                for row in reader:
                    contact = Contact(int(row["ID"]), row["Name"], row["Phone"], row["Email"])
                    self.contacts.append(contact)
            print("Контакты успешно импортированы из contacts.csv!")
        except FileNotFoundError:
            print("Файл contacts.csv не найден.")

    # Калькулятор
    def calculator(self):
        try:
            expression = input("Введите математическое выражение: ")
            result = eval(expression)
            print(f"Результат: {result}")
        except Exception as e:
            print(f"Ошибка: {e}")


if __name__ == "__main__":
    assistant = PersonalAssistant()
    assistant.run()

